#!/system/bin/sh
#====================================================
#              FILE: SSAF_kernel_tuner
#            AUTHOR: ImbaWind @ XDA
#       DESCRIPTION: Edit various kernel parameters
#====================================================
. "/system/bin/SSAF_INCL"
REBOOT_REQUIRED=0

SCRIPT_VERSION=1

ACTION=$1
if [ "$ACTION" = "VERSION" ]; then
	echo "$SCRIPT_VERSION";
	exit
fi

function set_powercfg()
{
	FILE=/system/etc/init.d/LS00powercfg
	# ===================================================================================================
	# Values taken from yc9559's Project WIPE 
	# powercfg script
	# verify_param() function
	powersave_value="80 680000:27 780000:39 880000:61 980000:68 1380000:98 1680000:94"
	balance_value="80 780000:53 880000:70 980000:50 1180000:71 1380000:97 1680000:92"
	performance_value="80 780000:31 880000:62 980000:42 1180000:69 1380000:95 1680000:78"
	fast_value="80 1680000:90"
	# ===================================================================================================
	expected_target=/sys/devices/system/cpu/cpu0/cpufreq/interactive/target_loads
	if [ "`cat ${expected_target}`" = "${powersave_value}" ]; then
		CURRENT="powersave"
	elif [ "`cat ${expected_target}`" = "${balance_value}" ]; then
		CURRENT="balance"
	elif [ "`cat ${expected_target}`" = "${performance_value}" ]; then
		CURRENT="performance"
	elif [ "`cat ${expected_target}`" = "${fast_value}" ]; then
		CURRENT="fast"
	else
		CURRENT="kernel_default"
	fi
	sed -i  "11 cpowercfg ${CURRENT}" $FILE
	while :
	do
		clear;
		echo "${GREEN}Project WIPE by yc9559 @ CoolApk${NONE}";
		echo "${GREEN}Github: github.com/yc9559/cpufreq-interactive-opt/${NONE}";
		echo "${GREEN}Ver: 20180603.2 [Thu Jun 28 04:26:24 2018]${NONE}";
		echo "";
		echo "";
		echo "Current config: ${CYAN}${CURRENT}${NONE}";
		echo "";
		echo " 1. Powersave";
		echo " 2. Balance";
		echo " 3. Performance";
		echo " 4. Fast";
		echo " 5. Restore Kernel Default";
		echo " 0. Exit";
		echo "";
		echo -n "${YELLOW}Enter Option: ${NONE}";
		read opt
		case $opt in
			1)	clear;
				echo "Setting power config to ${CYAN}[Powersave]${NONE}.";
				echo "";
				powercfg powersave
				sed -i  "11 cpowercfg powersave" $FILE
				echo "";
				press_enter
				break;;
			2)	clear;
				echo "Setting power config to ${CYAN}[Balance]${NONE}.";
				echo "";
				powercfg balance
				sed -i  "11 cpowercfg balance" $FILE
				echo "";
				press_enter
				break;;
			3)	clear;
				echo "Setting power config to ${CYAN}[Performance]${NONE}.";
				echo "";
				powercfg performance
				sed -i  "11 cpowercfg performance" $FILE
				echo "";
				press_enter
				break;;
			4)	clear;
				echo "Setting power config to ${CYAN}[Fast]${NONE}.";
				echo "";
				powercfg fast
				sed -i  "11 cpowercfg fast" $FILE
				echo "";
				press_enter
				break;;
			5)	clear;
				REBOOT_REQUIRED=1
				echo "Setting power config to ${CYAN}[kernel_default]${NONE}.";
				echo "Reboot to apply setting.";
				echo "";
				powercfg kernel_default
				sed -i  "11 cpowercfg kernel_default" $FILE
				echo "";
				press_enter
				break;;
			0)	break;;
			*)	clear;
				echo "${RED}Invalid option.${NONE}";
				sleep 1
		esac
	done
}

function LITTLE_cluster_max_tuning()
{
	cpu_dir=/sys/devices/system/cpu/cpu0/cpufreq/
	cur_max_file=${cpu_dir}/scaling_max_freq
	FILE=/system/etc/init.d/LS00kernelconfig
	while :
	do
		CUR_MAX=`cat $cur_max_file`
		clear;
		echo "${BOLD}${GREEN}LITTLE cluster max frequency${NONE}";
		echo "Current Freq: ${CYAN}$(($CUR_MAX / 1000)) MHz${NONE}";
		echo "";
		i=0
		vAvailableFrequencies=($(cat $cpu_dir/scaling_available_frequencies))
		nAvailableFrequencies=${#vAvailableFrequencies[@]}
		while :
		do
			if [ "${vAvailableFrequencies[i]}" -gt 0 ] ; then
				echo "$(($i+1)).\t$((${vAvailableFrequencies[i]} / 1000))\tMHz";
				i=$((i + 1));
			else
				break;
			fi
		done
		echo "";
		echo " 0. Exit";
		echo "";
		echo -n "${YELLOW}Enter Option: ${NONE}";
		read opt

		if [ "$opt" -eq 0 ] ; then
			break;
		else
			opt=$((opt - 1));
		fi

		if [ "${vAvailableFrequencies[opt]}" -gt 0 ] ; then
			for i in 0 1 2 3; do
				chmod 660 /sys/devices/system/cpu/cpu$i/cpufreq/scaling_max_freq
				echo "${vAvailableFrequencies[opt]}" > /sys/devices/system/cpu/cpu$i/cpufreq/scaling_max_freq
				chmod 444 /sys/devices/system/cpu/cpu$i/cpufreq/scaling_max_freq
			done
				sed -i  "32 cecho ${vAvailableFrequencies[opt]} > /sys/devices/system/cpu/cpu\$i/cpufreq/scaling_max_freq" $FILE
		else
			clear
			echo "${RED}Invalid option${NONE}";
			sleep 2
			clear
		fi
	done
}

function LITTLE_cluster_min_tuning()
{
	cpu_dir=/sys/devices/system/cpu/cpu0/cpufreq/
	cur_min_file=${cpu_dir}/scaling_min_freq
	FILE=/system/etc/init.d/LS00kernelconfig
	while :
	do
		CUR_MIN=`cat $cur_min_file`
		clear;
		echo "${BOLD}${GREEN}LITTLE cluster min frequency${NONE}";
		echo "Current Freq: ${CYAN}$(($CUR_MIN / 1000)) MHz${NONE}";
		echo "";
		i=0
		vAvailableFrequencies=($(cat $cpu_dir/scaling_available_frequencies))
		nAvailableFrequencies=${#vAvailableFrequencies[@]}
		while :
		do
			if [ "${vAvailableFrequencies[i]}" -gt 0 ] ; then
				echo "$(($i+1)).\t$((${vAvailableFrequencies[i]} / 1000))\tMHz";
				i=$((i + 1));
			else
				break;
			fi
		done
		echo "";
		echo " 0. Exit";
		echo "";
		echo -n "${YELLOW}Enter Option: ${NONE}";
		read opt

		if [ "$opt" -eq 0 ] ; then
			break;
		else
			opt=$((opt - 1));
		fi

		if [ "${vAvailableFrequencies[opt]}" -gt 0 ] ; then
			for i in 0 1 2 3; do
				chmod 660 /sys/devices/system/cpu/cpu$i/cpufreq/scaling_min_freq
				echo "${vAvailableFrequencies[opt]}" > /sys/devices/system/cpu/cpu$i/cpufreq/scaling_min_freq
				chmod 444 /sys/devices/system/cpu/cpu$i/cpufreq/scaling_min_freq
			done
				sed -i  "40 cecho ${vAvailableFrequencies[opt]} > /sys/devices/system/cpu/cpu\$i/cpufreq/scaling_min_freq" $FILE
		else
			clear
			echo "${RED}Invalid option${NONE}";
			sleep 2
			clear
		fi
	done
}

function big_cluster_max_tuning()
{
	cpu_dir=/sys/devices/system/cpu/cpu4/cpufreq/
	cur_max_file=${cpu_dir}/scaling_max_freq
	FILE=/system/etc/init.d/LS00kernelconfig
	while :
	do
		CUR_MAX=`cat $cur_max_file`
		clear;
		echo "${BOLD}${GREEN}big cluster max frequency${NONE}";
		echo "Current Freq: ${CYAN}$(($CUR_MAX / 1000)) MHz${NONE}";
		echo "";
		i=0
		vAvailableFrequencies=($(cat $cpu_dir/scaling_available_frequencies))
		nAvailableFrequencies=${#vAvailableFrequencies[@]}
		while :
		do
			if [ "${vAvailableFrequencies[i]}" -gt 0 ] ; then
				echo "$(($i+1)).\t$((${vAvailableFrequencies[i]} / 1000))\tMHz";
				i=$((i + 1));
			else
				break;
			fi
		done
		echo "";
		echo " 0. Exit";
		echo "";
		echo -n "${YELLOW}Enter Option: ${NONE}";
		read opt

		if [ "$opt" -eq 0 ] ; then
			break;
		else
			opt=$((opt - 1));
		fi

		if [ "${vAvailableFrequencies[opt]}" -gt 0 ] ; then
			for i in 4 5 6 7; do
				chmod 660 /sys/devices/system/cpu/cpu$i/cpufreq/scaling_max_freq
				echo "${vAvailableFrequencies[opt]}" > /sys/devices/system/cpu/cpu$i/cpufreq/scaling_max_freq
				chmod 444 /sys/devices/system/cpu/cpu$i/cpufreq/scaling_max_freq
			done
				sed -i  "48 cecho ${vAvailableFrequencies[opt]} > /sys/devices/system/cpu/cpu$i/cpufreq/scaling_max_freq" $FILE
		else
			clear
			echo "${RED}Invalid option${NONE}";
			sleep 2
			clear
		fi
	done
}

function big_cluster_min_tuning()
{
	cpu_dir=/sys/devices/system/cpu/cpu4/cpufreq/
	cur_min_file=${cpu_dir}/scaling_min_freq
	FILE=/system/etc/init.d/LS00kernelconfig
	while :
	do
		CUR_MIN=`cat $cur_min_file`
		clear;
		echo "${BOLD}${GREEN}big cluster min frequency${NONE}";
		echo "Current Freq: ${CYAN}$(($CUR_MIN / 1000)) MHz${NONE}";
		echo "";
		i=0
		vAvailableFrequencies=($(cat $cpu_dir/scaling_available_frequencies))
		nAvailableFrequencies=${#vAvailableFrequencies[@]}
		while :
		do
			if [ "${vAvailableFrequencies[i]}" -gt 0 ] ; then
				echo "$(($i+1)).\t$((${vAvailableFrequencies[i]} / 1000))\tMHz";
				i=$((i + 1));
			else
				break;
			fi
		done
		echo "";
		echo " 0. Exit";
		echo "";
		echo -n "${YELLOW}Enter Option: ${NONE}";
		read opt

		if [ "$opt" -eq 0 ] ; then
			break;
		else
			opt=$((opt - 1));
		fi

		if [ "${vAvailableFrequencies[opt]}" -gt 0 ] ; then
			for i in 4 5 6 7; do
				chmod 660 /sys/devices/system/cpu/cpu$i/cpufreq/scaling_min_freq
				echo "${vAvailableFrequencies[opt]}" > /sys/devices/system/cpu/cpu$i/cpufreq/scaling_min_freq
				chmod 444 /sys/devices/system/cpu/cpu$i/cpufreq/scaling_min_freq
			done
				sed -i  "56 cecho ${vAvailableFrequencies[opt]} > /sys/devices/system/cpu/cpu$i/cpufreq/scaling_min_freq" $FILE
		else
			clear
			echo "${RED}Invalid option${NONE}";
			sleep 2
			clear
		fi
	done
}

while :
do
	clear;
	echo -e "${GREEN}${BOLD}Kernel Tuner${NONE}";
	echo "Version: ${CYAN}$SCRIPT_VERSION${NONE}";
	echo "";
	echo " 1. Powercfg";
	echo " 2. big Cluster Max";
	echo " 3. big Cluster Min";
	echo " 4. LITTLE Cluster Max";
	echo " 5. LITTLE Cluster Min";
	echo " 0. Exit";
	echo "";
	echo -n "${YELLOW}Enter option : ${NONE}";
	read opt
	echo "";
	case $opt in
		1)	set_powercfg;;
		2)	big_cluster_max_tuning;;
		3)	big_cluster_max_tuning;;
		4)	LITTLE_cluster_max_tuning;;
		5)	LITTLE_cluster_max_tuning;;
		6)	governor_tuning;;
		0)	break;;
		*)	clear;
			echo "${RED}Invalid option${NONE}"
			sleep 2;;
	esac
done