#!/system/bin/sh
#====================================================
#              FILE: SSAF_kernel_tuner
#            AUTHOR: ImbaWind @ XDA
#       DESCRIPTION: Edit various kernel parameters
#====================================================
. "/system/bin/SSAF_INCL"
REBOOT_REQUIRED=0

KERNEL_TUNER_VERSION=1

ACTION=$1
if [ "$ACTION" = "version" ]; then
	echo "$KERNEL_TUNER_VERSION";
	exit
fi

function set_powercfg()
{
	FILE=/system/etc/init.d/LS00powercfg
	CUR_LEVEL_FILE="/dev/.wipe_cur_level"
	
	cur_level=`cat ${CUR_LEVEL_FILE}`
	if [ -n "${cur_level}" ]; then
		if [ "${cur_level}" -eq 5 ]; then
			CURRENT="powersave"
			sed -i  "11 cpowercfg ${CURRENT}" $FILE
		elif [ "${cur_level}" -eq 3 ]; then
			CURRENT="balance"
			sed -i  "11 cpowercfg ${CURRENT}" $FILE
		elif [ "${cur_level}" -eq 1 ]; then
			CURRENT="performance"
			sed -i  "11 cpowercfg ${CURRENT}" $FILE
		elif [ "${cur_level}" -eq 0 ]; then
			CURRENT="fast"
			sed -i  "11 cpowercfg ${CURRENT}" $FILE
		fi
	else
		CURRENT="kernel_default"
	fi
	while :
	do
		clear;
		echo "${GREEN}Project WIPEv2 by yc9559 @ CoolApk${NONE}";
		echo "${GREEN}Github: https://github.com/yc9559/wipe-v2${NONE}";
		echo "${GREEN}Ver: 20190528 DEV${NONE}";
		echo "";
		echo "";
		echo "Current config: ${CYAN}${CURRENT}${NONE}";
		echo "";
		echo " 1. Powersave";
		echo " 2. Balance";
		echo " 3. Performance";
		echo " 4. Fast";
		echo " 5. Restore Kernel Default";
		echo " 0. Exit";
		echo "";
		echo -n "${YELLOW}Enter Option: ${NONE}";
		read opt
		case $opt in
			1)	clear;
				echo "Setting power config to ${CYAN}[Powersave]${NONE}.";
				echo "";
				powercfg powersave
				sed -i  "11 cpowercfg powersave" $FILE
				echo "";
				press_enter
				break;;
			2)	clear;
				echo "Setting power config to ${CYAN}[Balance]${NONE}.";
				echo "";
				powercfg balance
				sed -i  "11 cpowercfg balance" $FILE
				echo "";
				press_enter
				break;;
			3)	clear;
				echo "Setting power config to ${CYAN}[Performance]${NONE}.";
				echo "";
				powercfg performance
				sed -i  "11 cpowercfg performance" $FILE
				echo "";
				press_enter
				break;;
			4)	clear;
				echo "Setting power config to ${CYAN}[Fast]${NONE}.";
				echo "";
				powercfg fast
				sed -i  "11 cpowercfg fast" $FILE
				echo "";
				press_enter
				break;;
			5)	clear;
				echo "Setting power config to ${CYAN}[kernel_default]${NONE}.";
				echo "";
				powercfg restore
				sed -i  "11 cpowercfg=restore" $FILE
				echo "";
				press_enter
				break;;
			0)	break;;
			*)	clear;
				echo "${RED}Invalid option.${NONE}";
				sleep 1
		esac
	done
}

function LITTLE_cluster_max_tuning()
{
	cpu_dir=/sys/devices/system/cpu/cpu0/cpufreq/
	cur_max_file=${cpu_dir}/scaling_max_freq
	FILE=/system/etc/init.d/LS00kernelconfig
	while :
	do
		CUR_MAX=`cat $cur_max_file`
		clear;
		echo "${BOLD}${GREEN}LITTLE cluster max frequency${NONE}";
		echo "Current Freq: ${CYAN}$(($CUR_MAX / 1000)) MHz${NONE}";
		echo "";
		i=0
		vAvailableFrequencies=($(cat $cpu_dir/scaling_available_frequencies))
		nAvailableFrequencies=${#vAvailableFrequencies[@]}
		while :
		do
			if [ "${vAvailableFrequencies[i]}" -gt 0 ] ; then
				echo "$(($i+1)).\t$((${vAvailableFrequencies[i]} / 1000))\tMHz";
				i=$((i + 1));
			else
				break;
			fi
		done
		echo "";
		echo " 0. Exit";
		echo "";
		echo -n "${YELLOW}Enter Option: ${NONE}";
		read opt

		if [ "$opt" -eq 0 ] ; then
			break;
		else
			opt=$((opt - 1));
		fi

		if [ "${vAvailableFrequencies[opt]}" -gt 0 ] ; then
			lock_value "${vAvailableFrequencies[opt]}" /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq
			sed -i  "${LITTLE_MAX} cecho ${vAvailableFrequencies[opt]} > /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq" $FILE
		else
			clear
			echo "${RED}Invalid option${NONE}";
			sleep 2
			clear
		fi
	done
}

function LITTLE_cluster_min_tuning()
{
	cpu_dir=/sys/devices/system/cpu/cpu0/cpufreq/
	cur_min_file=${cpu_dir}/scaling_min_freq
	FILE=/system/etc/init.d/LS00kernelconfig
	while :
	do
		CUR_MIN=`cat $cur_min_file`
		clear;
		echo "${BOLD}${GREEN}LITTLE cluster min frequency${NONE}";
		echo "Current Freq: ${CYAN}$(($CUR_MIN / 1000)) MHz${NONE}";
		echo "";
		i=0
		vAvailableFrequencies=($(cat $cpu_dir/scaling_available_frequencies))
		nAvailableFrequencies=${#vAvailableFrequencies[@]}
		while :
		do
			if [ "${vAvailableFrequencies[i]}" -gt 0 ] ; then
				echo "$(($i+1)).\t$((${vAvailableFrequencies[i]} / 1000))\tMHz";
				i=$((i + 1));
			else
				break;
			fi
		done
		echo "";
		echo " 0. Exit";
		echo "";
		echo -n "${YELLOW}Enter Option: ${NONE}";
		read opt

		if [ "$opt" -eq 0 ] ; then
			break;
		else
			opt=$((opt - 1));
		fi

		if [ "${vAvailableFrequencies[opt]}" -gt 0 ] ; then
			lock_value "${vAvailableFrequencies[opt]}" /sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq
			sed -i  "${LITTLE_MIN} clock_value ${vAvailableFrequencies[opt]} /sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq" $FILE
		else
			clear
			echo "${RED}Invalid option${NONE}";
			sleep 2
			clear
		fi
	done
}

function big_cluster_max_tuning()
{
	cpu_dir=/sys/devices/system/cpu/cpu4/cpufreq/
	cur_max_file=${cpu_dir}/scaling_max_freq
	FILE=/system/etc/init.d/LS00kernelconfig
	while :
	do
		CUR_MAX=`cat $cur_max_file`
		clear;
		echo "${BOLD}${GREEN}big cluster max frequency${NONE}";
		echo "Current Freq: ${CYAN}$(($CUR_MAX / 1000)) MHz${NONE}";
		echo "";
		i=0
		vAvailableFrequencies=($(cat $cpu_dir/scaling_available_frequencies))
		nAvailableFrequencies=${#vAvailableFrequencies[@]}
		while :
		do
			if [ "${vAvailableFrequencies[i]}" -gt 0 ] ; then
				echo "$(($i+1)).\t$((${vAvailableFrequencies[i]} / 1000))\tMHz";
				i=$((i + 1));
			else
				break;
			fi
		done
		echo "";
		echo " 0. Exit";
		echo "";
		echo -n "${YELLOW}Enter Option: ${NONE}";
		read opt

		if [ "$opt" -eq 0 ] ; then
			break;
		else
			opt=$((opt - 1));
		fi

		if [ "${vAvailableFrequencies[opt]}" -gt 0 ] ; then
			lock_value "${vAvailableFrequencies[opt]}" /sys/devices/system/cpu/cpu4/cpufreq/scaling_max_freq
			sed -i  "${big_MAX} clock_value ${vAvailableFrequencies[opt]} /sys/devices/system/cpu/cpu4/cpufreq/scaling_max_freq" $FILE
		else
			clear
			echo "${RED}Invalid option${NONE}";
			sleep 2
			clear
		fi
	done
}

function big_cluster_min_tuning()
{
	cpu_dir=/sys/devices/system/cpu/cpu4/cpufreq/
	cur_min_file=${cpu_dir}/scaling_min_freq
	FILE=/system/etc/init.d/LS00kernelconfig
	while :
	do
		CUR_MIN=`cat $cur_min_file`
		clear;
		echo "${BOLD}${GREEN}big cluster min frequency${NONE}";
		echo "Current Freq: ${CYAN}$(($CUR_MIN / 1000)) MHz${NONE}";
		echo "";
		i=0
		vAvailableFrequencies=($(cat $cpu_dir/scaling_available_frequencies))
		nAvailableFrequencies=${#vAvailableFrequencies[@]}
		while :
		do
			if [ "${vAvailableFrequencies[i]}" -gt 0 ] ; then
				echo "$(($i+1)).\t$((${vAvailableFrequencies[i]} / 1000))\tMHz";
				i=$((i + 1));
			else
				break;
			fi
		done
		echo "";
		echo " 0. Exit";
		echo "";
		echo -n "${YELLOW}Enter Option: ${NONE}";
		read opt

		if [ "$opt" -eq 0 ] ; then
			break;
		else
			opt=$((opt - 1));
		fi

		if [ "${vAvailableFrequencies[opt]}" -gt 0 ] ; then
			lock_value "${vAvailableFrequencies[opt]}" /sys/devices/system/cpu/cpu4/cpufreq/scaling_min_freq
			sed -i  "${big_MIN} clock_value ${vAvailableFrequencies[opt]} /sys/devices/system/cpu/cpu4/cpufreq/scaling_min_freq" $FILE
		else
			clear
			echo "${RED}Invalid option${NONE}";
			sleep 2
			clear
		fi
	done
}

function LITTLE_cluster_gov_tuning()
{
	cpu_dir=/sys/devices/system/cpu/cpu0/cpufreq/
	cur_gov_file=${cpu_dir}/scaling_governor
	FILE=/system/etc/init.d/LS00kernelconfig
	while :
	do
		CUR_GOV=`cat $cur_gov_file`
		clear;
		echo "${BOLD}${GREEN}LITTLE cluster governor${NONE}";
		echo "Current Governor: ${CYAN}$CUR_GOV${NONE}";
		echo "";
		i=0
		vAvailableGovernors=($(cat $cpu_dir/scaling_available_governors))
		nAvailableGovernors=${#vAvailableGovernors[@]}
		while :
		do
			if [ "${vAvailableGovernors[i]}" ] ; then
				echo "$(($i+1)).\t${vAvailableGovernors[i]}";
				i=$((i + 1));
			else
				break;
			fi
		done
		echo "";
		echo " 0. Exit";
		echo "";
		echo -n "${YELLOW}Enter Option: ${NONE}";
		read opt

		if [ "$opt" -eq 0 ] ; then
			break;
		else
			opt=$((opt - 1));
		fi

		if [ "${vAvailableGovernors[opt]}" ] ; then
			lock_value "${vAvailableGovernors[opt]}" /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
			sed -i  "${LITTLE_GOV} clock_value ${vAvailableGovernors[opt]} /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor" $FILE
		else
			clear
			echo "${RED}Invalid option${NONE}";
			sleep 2
			clear
		fi
	done
}

function big_cluster_gov_tuning()
{
	cpu_dir=/sys/devices/system/cpu/cpu4/cpufreq/
	cur_gov_file=${cpu_dir}/scaling_governor
	FILE=/system/etc/init.d/LS00kernelconfig
	while :
	do
		CUR_GOV=`cat $cur_gov_file`
		clear;
		echo "${BOLD}${GREEN}big cluster governor${NONE}";
		echo "Current Governor: ${CYAN}$CUR_GOV${NONE}";
		echo "";
		i=0
		vAvailableGovernors=($(cat $cpu_dir/scaling_available_governors))
		nAvailableGovernors=${#vAvailableGovernors[@]}
		while :
		do
			if [ "${vAvailableGovernors[i]}" ] ; then
				echo "$(($i+1)).\t${vAvailableGovernors[i]}";
				i=$((i + 1));
			else
				break;
			fi
		done
		echo "";
		echo " 0. Exit";
		echo "";
		echo -n "${YELLOW}Enter Option: ${NONE}";
		read opt

		if [ "$opt" -eq 0 ] ; then
			break;
		else
			opt=$((opt - 1));
		fi

		if [ "${vAvailableGovernors[opt]}" ] ; then
			lock_value "${vAvailableGovernors[opt]}" /sys/devices/system/cpu/cpu4/cpufreq/scaling_governor
			sed -i  "${big_GOV} clock_value ${vAvailableGovernors[opt]} /sys/devices/system/cpu/cpu4/cpufreq/scaling_governor" $FILE
		else
			clear
			echo "${RED}Invalid option${NONE}";
			sleep 2
			clear
		fi
	done
}

function GPU_max_tuning()
{
	gpu_dir=/sys/kernel/gpu/
	cur_max_file=${gpu_dir}/gpu_max_clock
	FILE=/system/etc/init.d/LS00kernelconfig
	while :
	do
		CUR_MAX=`cat $cur_max_file`
		clear;
		echo "${BOLD}${GREEN}GPU max frequency${NONE}";
		echo "Current Freq: ${CYAN}$(($CUR_MAX / 1000)) MHz${NONE}";
		echo "";
		i=0
		vAvailableFrequencies=($(cat $gpu_dir/gpu_freq_table))
		nAvailableFrequencies=${#vAvailableFrequencies[@]}
		while :
		do
			if [ "${vAvailableFrequencies[i]}" -gt 0 ] ; then
				echo "$(($i+1)).\t$((${vAvailableFrequencies[i]} / 1000))\tMHz";
				i=$((i + 1));
			else
				break;
			fi
		done
		echo "";
		echo " 0. Exit";
		echo "";
		echo -n "${YELLOW}Enter Option: ${NONE}";
		read opt

		if [ "$opt" -eq 0 ] ; then
			break;
		else
			opt=$((opt - 1));
		fi

		if [ "${vAvailableFrequencies[opt]}" -gt 0 ] ; then
			lock_value "${vAvailableFrequencies[opt]}" /sys/kernel/gpu/gpu_max_clock
			sed -i  "${GPU_MAX} clock_value ${vAvailableFrequencies[opt]} /sys/kernel/gpu/gpu_max_clock" $FILE
		else
			clear
			echo "${RED}Invalid option${NONE}";
			sleep 2
			clear
		fi
	done
}

function GPU_min_tuning()
{
	gpu_dir=/sys/kernel/gpu/
	cur_min_file=${gpu_dir}/gpu_min_clock
	FILE=/system/etc/init.d/LS00kernelconfig
	while :
	do
		CUR_MIN=`cat $cur_min_file`
		clear;
		echo "${BOLD}${GREEN}GPU min frequency${NONE}";
		echo "Current Freq: ${CYAN}$(($CUR_MIN / 1000)) MHz${NONE}";
		echo "";
		i=0
		vAvailableFrequencies=($(cat $gpu_dir/gpu_freq_table))
		nAvailableFrequencies=${#vAvailableFrequencies[@]}
		while :
		do
			if [ "${vAvailableFrequencies[i]}" -gt 0 ] ; then
				echo "$(($i+1)).\t$((${vAvailableFrequencies[i]} / 1000))\tMHz";
				i=$((i + 1));
			else
				break;
			fi
		done
		echo "";
		echo " 0. Exit";
		echo "";
		echo -n "${YELLOW}Enter Option: ${NONE}";
		read opt

		if [ "$opt" -eq 0 ] ; then
			break;
		else
			opt=$((opt - 1));
		fi

		if [ "${vAvailableFrequencies[opt]}" -gt 0 ] ; then
			lock_value "${vAvailableFrequencies[opt]}" /sys/kernel/gpu/gpu_min_clock
			sed -i  "${GPU_MIN} clock_value ${vAvailableFrequencies[opt]} /sys/kernel/gpu/gpu_min_clock" $FILE
		else
			clear
			echo "${RED}Invalid option${NONE}";
			sleep 2
			clear
		fi
	done
}

function GPU_gov_tuning()
{
	gpu_dir=/sys/kernel/gpu/
	cur_gov_file=${gpu_dir}/gpu_governor
	FILE=/system/etc/init.d/LS00kernelconfig
	while :
	do
		CUR_GOV=`cat $cur_gov_file`
		clear;
		echo "${BOLD}${GREEN}GPU governor${NONE}";
		echo "Current Governor: ${CYAN}$CUR_GOV${NONE}";
		echo "";
		i=0
		vAvailableGovernors=($(cat $gpu_dir/gpu_available_governor))
		nAvailableGovernors=${#vAvailableGovernors[@]}
		while :
		do
			if [ "${vAvailableGovernors[i]}" ] ; then
				echo "$(($i+1)).\t${vAvailableGovernors[i]}";
				i=$((i + 1));
			else
				break;
			fi
		done
		echo "";
		echo " 0. Exit";
		echo "";
		echo -n "${YELLOW}Enter Option: ${NONE}";
		read opt

		if [ "$opt" -eq 0 ] ; then
			break;
		else
			opt=$((opt - 1));
		fi

		if [ "${vAvailableGovernors[opt]}" ] ; then
			lock_value "${vAvailableGovernors[opt]}" /sys/kernel/gpu/gpu_governor
			sed -i  "${GPU_GOV} clock_value ${vAvailableGovernors[opt]} /sys/kernel/gpu/gpu_governor" $FILE
		else
			clear
			echo "${RED}Invalid option${NONE}";
			sleep 2
			clear
		fi
	done
}

while :
do
	clear;
	echo -e "${GREEN}${BOLD}Kernel Tuner${NONE}";
	echo "Version: ${CYAN}$SCRIPT_VERSION${NONE}";
	echo "";
	echo " 1. Powercfg";
	echo " 2. big Cluster Max";
	echo " 3. big Cluster Min";
	echo " 4. LITTLE Cluster Max";
	echo " 5. LITTLE Cluster Min";
	echo " 6. big Cluster Governor";
	echo " 7. LITTLE Cluster Governor";
	echo " 8. GPU Max Frequency"
	echo " 9. GPU Min Frequency"
	echo " 10.GPU Governor"
	echo " 0. Exit";
	echo "";
	echo -n "${YELLOW}Enter option : ${NONE}";
	read opt
	echo "";
	case $opt in
		1)	set_powercfg;;
		2)	big_cluster_max_tuning;;
		3)	big_cluster_min_tuning;;
		4)	LITTLE_cluster_max_tuning;;
		5)	LITTLE_cluster_min_tuning;;
		6)	big_cluster_gov_tuning;;
		7)	LITTLE_cluster_gov_tuning;;
		8)	GPU_max_tuning;;
		9)	GPU_min_tuning;;
		10)	GPU_gov_tuning;;
		0)	break;;
		*)	clear;
			echo "${RED}Invalid option${NONE}"
			sleep 2;;
	esac
done