#!/system/bin/sh
#==============================================================
#       FILE: cfg
#       AUTHOR: ImbaWind @ XDA
#       DESCRIPTION: Shell Script Advanced Features
#       USAGE: cfg
#==============================================================

SCRIPT_VERSION="PRE-RELEASED"

NONE='\033[00m'
RED='\033[01;31m'
GREEN='\033[01;32m'
YELLOW='\033[01;33m'
PURPLE='\033[01;35m'
CYAN='\033[01;36m'
WHITE='\033[01;37m'
BOLD='\033[1m'
UNDERLINE='\033[4m'

CMD=/system/bin/cmd
REBOOT_REQUIRED=0;

function MOUNT_RW()
{
	if [ ! -f "/system/xbin/sysrw" ]; then
		mount -o rw,remount /system
	else
		/system/xbin/sysrw
	fi
}

function MOUNT_RO()
{
	if [ -f "/system/xbin/sysro" ]; then
		/system/xbin/sysro
	fi
}

function press_enter()
{
	echo -n "Press EnterKey to continue.";
	read enterKey
}

function check_root()
{
	clear;
	if [[ $(id -u) -ne 0 ]] ; then
		echo "This script requires root access to execute";
		echo "Type  su  first before  cfg";
		echo "";
		sleep 2
		press_enter
		exit 0
	fi
}

function verify_files()
{
	clear
	FILES_UPDATED=0

# ========================================================
# Download missing files
# ========================================================
	if [ ! -f "/system/bin/powercfg" ]; then 
		FILES_UPDATED=1
		echo "Downloading powercfg...";
		MOUNT_RW
		wget -O /system/bin/powercfg https://raw.githubusercontent.com/imbawind/Shell-Script-Advanced-Features/master/system/bin/powercfg
		MOUNT_RO
		echo "";
	fi
	if [ ! -f "/system/bin/set_key" ]; then 
		FILES_UPDATED=1
		echo "Downloading set_key...";
		MOUNT_RW
		wget -O /system/bin/set_key https://raw.githubusercontent.com/imbawind/Shell-Script-Advanced-Features/master/system/bin/set_key
		MOUNT_RO
		echo "";
	fi
	if [ ! -f "/system/bin/set_prop" ]; then 
		FILES_UPDATED=1
		echo "Downloading set_prop...";
		MOUNT_RW
		wget -O /system/bin/set_prop https://raw.githubusercontent.com/imbawind/Shell-Script-Advanced-Features/master/system/bin/set_prop
		MOUNT_RO
		echo "";
	fi
	if [ ! -f "/system/xbin/dss" ]; then 
		FILES_UPDATED=1
		echo "Downloading dss...";
		MOUNT_RW
		wget -O /system/xbin/dss https://raw.githubusercontent.com/imbawind/Shell-Script-Advanced-Features/master/system/xbin/dss
		MOUNT_RO
		echo "";
	fi
	if [ ! -f "/system/xbin/dss2" ]; then 
		FILES_UPDATED=1
		echo "Downloading dss2...";
		MOUNT_RW
		wget -O /system/xbin/dss2 https://raw.githubusercontent.com/imbawind/Shell-Script-Advanced-Features/master/system/xbin/dss2
		MOUNT_RO
		echo "";
	fi
	if [ ! -f "/system/etc/init.d/LS00devicename" ]; then 
		FILES_UPDATED=1
		echo "Downloading LS00devicename...";
		MOUNT_RW
		wget -O /system/etc/init.d/LS00devicename https://raw.githubusercontent.com/imbawind/Shell-Script-Advanced-Features/master/system/etc/init.d/LS00devicename
		sed -i  "6 cdoresetprop ro.product.model '`getprop ro.product.model`'" /system/etc/init.d/LS00devicename
		sed -i  "7 cdoresetprop ro.product.brand '`getprop ro.product.brand`'" /system/etc/init.d/LS00devicename
		sed -i  "8 cdoresetprop ro.product.manufacturer '`getprop ro.product.manufacturer`'" /system/etc/init.d/LS00devicename
		sed -i  "9 cdoresetprop ro.product.name '`getprop ro.product.name`'" /system/etc/init.d/LS00devicename
		sed -i  "10 cdoresetprop ro.product.device '`getprop ro.product.device`'" /system/etc/init.d/LS00devicename
		MOUNT_RO
		echo "";
	fi
	if [ ! -f "/system/etc/init.d/LS00powercfg" ]; then 
		FILES_UPDATED=1
		echo "Downloading LS00powercfg...";
		MOUNT_RW
		wget -O /system/etc/init.d/LS00powercfg https://raw.githubusercontent.com/imbawind/Shell-Script-Advanced-Features/master/system/etc/init.d/LS00powercfg
		MOUNT_RO
		echo "";
	fi
	if [ ! -f "/system/etc/init.d/LS00resetdns" ]; then 
		FILES_UPDATED=1
		echo "Downloading LS00resetdns...";
		MOUNT_RW
		wget -O /system/etc/init.d/LS00resetdns https://raw.githubusercontent.com/imbawind/Shell-Script-Advanced-Features/master/system/etc/init.d/LS00resetdns
		MOUNT_RO
		echo "";
	fi
	if [ ! -f "/system/etc/init.d/LS00kernelconfig" ]; then 
		FILES_UPDATED=1
		echo "Downloading LS00kernelconfig...";
		MOUNT_RW
		wget -O /system/etc/init.d/LS00kernelconfig https://raw.githubusercontent.com/imbawind/Shell-Script-Advanced-Features/master/system/etc/init.d/LS00kernelconfig
		sed -i  "24 cecho `cat /sys/devices/system/cpu/cpu4/cpufreq/scaling_max_freq` > /sys/devices/system/cpu/cpu\$i/cpufreq/scaling_max_freq" /system/etc/init.d/LS00kernelconfig
		sed -i  "16 cecho `cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq` > /sys/devices/system/cpu/cpu\$i/cpufreq/scaling_max_freq" /system/etc/init.d/LS00kernelconfig
		MOUNT_RO
		echo "";
	fi
	if [ ! -f "/system/etc/hosts.long" ]; then 
		FILES_UPDATED=1
		echo "Downloading hosts.long...";
		MOUNT_RW
		wget -O /system/etc/hosts.long https://raw.githubusercontent.com/imbawind/Shell-Script-Advanced-Features/master/system/etc/hosts.long
		MOUNT_RO
		echo "";
	fi
	if [ ! -f "/system/etc/hosts.medium" ]; then 
		FILES_UPDATED=1
		echo "Downloading hosts.medium...";
		MOUNT_RW
		wget -O /system/etc/hosts.medium https://raw.githubusercontent.com/imbawind/Shell-Script-Advanced-Features/master/system/etc/hosts.medium
		MOUNT_RO
		echo "";
	fi
	if [ ! -f "/system/etc/hosts.short" ]; then 
		FILES_UPDATED=1
		echo "Downloading hosts.short...";
		MOUNT_RW
		wget -O /system/etc/hosts.short https://raw.githubusercontent.com/imbawind/Shell-Script-Advanced-Features/master/system/etc/hosts.short
		MOUNT_RO
		echo "";
	fi
	if [ ! -f "/system/usr/keylayout/Generic.kl" ]; then 
		FILES_UPDATED=1
		echo "Downloading Generic.kl...";
		MOUNT_RW
		wget -O /system/usr/keylayout/Generic.kl https://raw.githubusercontent.com/imbawind/Shell-Script-Advanced-Features/master/system/usr/keylayout/Generic.kl
		MOUNT_RO
		echo "";
	fi

	if [ "$FILES_UPDATED" -eq 1 ]; then
		if [ ! -f "/system/bin/powercfg" ]; then
			echo "E: /system/bin/powercfg"
			press_enter
			exit 0
		fi
		echo "powercfg ${GREEN}OK${NONE}";

		if [ ! -f "/system/bin/set_key" ]; then
			echo "E: /system/bin/set_key"
			press_enter
			exit 0
		fi
		echo "set_key ${GREEN}OK${NONE}";

		if [ ! -f "/system/bin/set_prop" ]; then
			echo "E: /system/bin/set_prop"
			press_enter
			exit 0
		fi
		echo "set_prop ${GREEN}OK${NONE}";

		if [ ! -f "/system/xbin/dss" ]; then
			echo "E: /system/xbin/dss"
			press_enter
			exit 0
		fi
		echo "dss ${GREEN}OK${NONE}";

		if [ ! -f "/system/xbin/dss2" ]; then
			echo "E: /system/xbin/dss"
			press_enter
			exit 0
		fi
		echo "dss2 ${GREEN}OK${NONE}";

		if [ ! -f "/system/etc/init.d/LS00devicename" ]; then
			echo "E: /system/etc/init.d/LS00devicename"
			press_enter
			exit 0
		fi
		echo "LS00devicename ${GREEN}OK${NONE}";

		if [ ! -f "/system/etc/init.d/LS00powercfg" ]; then
			echo "E: /system/etc/init.d/LS00powercfg"
			press_enter
			exit 0
		fi
		echo "LS00powercfg ${GREEN}OK${NONE}";

		if [ ! -f "/system/etc/init.d/LS00resetdns" ]; then
			echo "E: /system/etc/init.d/LS00resetdns"
			press_enter
			exit 0
		fi
		echo "LS00resetdns ${GREEN}OK${NONE}";

		if [ ! -f "/system/etc/init.d/LS00kernelconfig" ]; then
			echo "E: /system/etc/init.d/LS00kernelconfig"
			press_enter
			exit 0
		fi
		echo "LS00kernelconfig ${GREEN}OK${NONE}";

		if [ ! -f "/system/etc/hosts.long" ]; then
			echo "E: /system/etc/hosts.long"
			press_enter
			exit 0
		fi
		echo "hosts.long ${GREEN}OK${NONE}";

		if [ ! -f "/system/etc/hosts.medium" ]; then
			echo "E: /system/etc/hosts.medium"
			press_enter
			exit 0
		fi
		echo "hosts.medium ${GREEN}OK${NONE}";

		if [ ! -f "/system/etc/hosts.short" ]; then
			echo "E: /system/etc/hosts.short"
			press_enter
			exit 0
		fi
		echo "hosts.short ${GREEN}OK${NONE}";

		if [ ! -f "/system/usr/keylayout/Generic.kl" ]; then
			echo "E: /system/usr/keylayout/Generic.kl"
			press_enter
			exit 0
		fi
		echo "Generic.kl ${GREEN}OK${NONE}";
		echo "";
	fi

# ========================================================
# Fix permissions
# ========================================================
	MOUNT_RW
	chmod 777 /system/bin/cfg
	chmod 777 /system/bin/powercfg
	chmod 777 /system/bin/set_key
	chmod 777 /system/bin/set_prop
	chmod 777 /system/xbin/dss
	chmod 777 /system/xbin/dss2
	chmod 755 /system/etc/init.d/LS00devicename
	chmod 755 /system/etc/init.d/LS00powercfg
	chmod 755 /system/etc/init.d/LS00resetdns
	chmod 755 /system/etc/init.d/LS00kernelconfig
	chmod 644 /system/etc/hosts.long
	chmod 644 /system/etc/hosts.medium
	chmod 644 /system/etc/hosts.short
	chmod 644 /system/usr/keylayout/Generic.kl
	MOUNT_RO

	if [ "$FILES_UPDATED" -eq 1 ]; then press_enter; fi
}

function edit_bixby()
{
	while :
	do
		clear;
		echo "${GREEN}Remap Bixby key to:${NONE}";
		echo ""
		echo " 1. Home Btn [HOME]";
		echo " 2. Power Btn [POWER]";
		echo " 3. Launch Music Player [MUSIC]";
		echo " 4. Media Play/Pause [MEDIA_PLAY_PAUSE]";
		echo " 5. Vol Up [VOLUME_UP]";
		echo " 6. Vol Down [VOLUME_DOWN]";
		echo " 7. Vol Mute [VOLUME_MUTE]";
		echo " 8. Launch Camera [CAMERA]";
		echo " 9. Recent Btn [APP_SWITCH]";
		echo "10. Google Assistant [ASSIST]";
		echo "11. Google Voice Assist [VOICE_ASSIST]";
		echo "12. Toggle Quick Panel [QPANEL_ON_OFF]";
		echo "13. Launch Internet Browser [EXPLORER]";
		echo "14. Screenshot [SYSRQ]";
		echo "15. Launch Calculator [CALCULATOR]";
		echo "16. Launch Calendar [CALENDAR]";
		echo "17. Launch Contacts [CONTACTS]";
		echo "18. Launch Call [CALL]";
		echo "99. Custom [Advanced Only]";
		echo "";
		echo " 0. Exit ";
		echo "";
		echo "Reboot to apply changes.";
        echo -n -n "${YELLOW}Enter option: ${NONE}"
		read bixby
		if [ "$bixby" -eq 0 ] ; then
			break;
		elif [ "$bixby" -eq 99 ] ; then
			clear;
			echo -n "${YELLOW}Enter custom function [Type 0 to exit]: ${NONE}";
			read arg
			if [ "$arg" -eq 0 ] ; then
				break;
			else
				set_key 703 $arg
				clear;
				echo "Bixby btn is mapped to: ";
				echo $arg
				echo "";
				press_enter
				break;
			fi
		elif [[ "$bixby" -lt 0 || "$bixby" -gt 18 ]] ; then
			clear;
			echo "${RED}Invalid Option${NONE}";
			press_enter
		else
			REBOOT_REQUIRED=1
			clear;
			case $bixby in
				1)	set_key 703 HOME
					echo "Bixby btn remapped to [Home Btn]";
					press_enter
					break;;
				2)	set_key 703 POWER
					echo "Bixby btn remapped to [Power Btn]";
					press_enter
					break;;
				3)	set_key 703 MUSIC
					echo "Bixby btn remapped to [Music Player]";
					press_enter
					break;;
				4)	set_key 703 MEDIA_PLAY_PAUSE
					echo "Bixby btn remapped to [Play/Pause]";
					press_enter
					break;;
				5)	set_key 703 VOLUME_UP
					echo "Bixby btn remapped to [Vol Up]";
					press_enter
					break;;
				6)	set_key 703 VOLUME_DOWN
					echo "Bixby btn remapped to [Vol Dn]";
					press_enter
					break;;
				7)	set_key 703 VOLUME_MUTE
					echo "Bixby btn remapped to [Vol Mute]";
					press_enter
					break;;
				8)	set_key 703 CAMERA
					echo "Bixby btn remapped to [Camera]";
					press_enter
					break;;
				9)	set_key 703 APP_SWITCH
					echo "Bixby btn remapped to [Recent Btn]";
					press_enter
					break;;
				10)	set_key 703 ASSIST
					echo "Bixby btn remapped to [Google Assistant";
					press_enter
					break;;
				11)	set_key 703 VOICE_ASSIST
					echo "Bixby btn remapped to [Voice Assistant]";
					press_enter
					break;;
				12)	set_key 703 QPANEL_ON_OFF
					echo "Bixby btn remapped to [Toggle Quick Panel]";
					press_enter
					break;;
				13)	set_key 703 EXPLORER
					echo "Bixby btn remapped to [Browser]";
					press_enter
					break;;
				14)	set_key 703 SYSRQ
					echo "Bixby btn remapped to [Screenshot]";
					press_enter
					break;;
				15)	set_key 703 CALCULATOR
					echo "Bixby btn remapped to [Calculator]";
					press_enter
					break;;
				16)	set_key 703 CALENDAR
					echo "Bixby btn remapped to [Calendar]";
					press_enter
					break;;
				17)	set_key 703 CONTACTS
					echo "Bixby btn remapped to [Contacts]";
					press_enter
					break;;
				18)	set_key 703 CALL
					echo "Bixby btn remapped to [Call]";
					press_enter
					break;;
			esac
		fi
	done
}

function edit_device()
{
	FILE=/system/etc/init.d/LS00devicename
	while :
	do
		clear;
		echo "${GREEN}Change device name to:${NONE}";
		echo "";
		echo " 1. Google Pixel 2";
		echo " 2. Google Pixel 2 XL";
		echo " 3. Google Pixel 3";
		echo " 4. Google Pixel 3 XL";
		echo " 5. Samsung Galaxy S8";
		echo " 6. Samsung Galaxy S8+";
		echo " 7. Samsung Galaxy S9";
		echo " 8. Samsung Galaxy S9+";
		echo " 9. Samsung Galaxy Note 9";
		echo " 0. Exit";
		echo "";
		echo "99. Custom [Advanced Only]";
		echo "";
		echo "Reboot to apply changes";
		echo "";
		echo -n "${YELLOW}Enter option: ${NONE}";
		read opt
		if [ "$opt" -eq 0 ] ; then
			break;
		elif [ "$opt" -eq 99 ] ; then
			REBOOT_REQUIRED=1
			clear;
			echo -n "${YELLOW}Enter custom model [Type 0 to exit]: ${NONE}";
			read arg
			if [ "$arg" -eq 0 ] ; then
				break;
			else
				clear;
				MOUNT_RW
				sed -i  "6 cdoresetprop ro.product.model $arg" $FILE
				MOUNT_RO
				clear;
				echo -n "Enter custom brand: ";
				read arg
				MOUNT_RW
				sed -i  "7 cdoresetprop ro.product.brand $arg" $FILE
				MOUNT_RO
				clear;
				echo -n "Enter custom manufacturer: ";
				read arg
				MOUNT_RW
				sed -i  "8 cdoresetprop ro.product.manufacturer $arg" $FILE
				MOUNT_RO
				clear;
				echo -n "Enter custom name: ";
				read arg
				MOUNT_RW
				sed -i  "9 cdoresetprop ro.product.name $arg" $FILE
				MOUNT_RO
				clear;
				echo -n "Enter custom device: ";
				read arg
				MOUNT_RW
				sed -i  "10 cdoresetprop ro.product.brand $arg" $FILE
				MOUNT_RO
				clear;
				press_enter
				break;
			fi
		elif [[ "$opt" -lt 0 || "$opt" -gt 9 ]] ; then
			clear;
			echo "${RED}Invalid Option${NONE}";
			echo -n "Press EnterKey to continue. ";
			read enterKey
		else
			REBOOT_REQUIRED=1
			clear;
			case $opt in
				1)	clear;
					echo "Resetting to Google Pixel 2";
					MOUNT_RW
					sed -i  "6 cdoresetprop ro.product.model 'Pixel 2'" $FILE
					sed -i  "7 cdoresetprop ro.product.brand 'Google'" $FILE
					sed -i  "8 cdoresetprop ro.product.manufacturer 'Google'" $FILE
					sed -i  "9 cdoresetprop ro.product.name 'walleye'" $FILE
					sed -i  "10 cdoresetprop ro.product.device 'walleye'" $FILE
					MOUNT_RO
					press_enter
					break;;
				2)	clear;
					echo "Resetting to Google Pixel 2 XL";
					MOUNT_RW
					sed -i  "6 cdoresetprop ro.product.model 'Pixel 2'" $FILE
					sed -i  "7 cdoresetprop ro.product.brand 'Google'" $FILE
					sed -i  "8 cdoresetprop ro.product.manufacturer 'Google'" $FILE
					sed -i  "9 cdoresetprop ro.product.name 'taimen'" $FILE
					sed -i  "10 cdoresetprop ro.product.device 'taimen'" $FILE
					MOUNT_RO
					press_enter
					break;;
				3)	clear;
					echo "Resetting to Google Pixel 3";
					MOUNT_RW
					sed -i  "6 cdoresetprop ro.product.model 'Pixel 3'" $FILE
					sed -i  "7 cdoresetprop ro.product.brand 'Google'" $FILE
					sed -i  "8 cdoresetprop ro.product.manufacturer 'Google'" $FILE
					sed -i  "9 cdoresetprop ro.product.name 'blueline'" $FILE
					sed -i  "10 cdoresetprop ro.product.device 'blueline'" $FILE
					MOUNT_RO
					press_enter
					break;;
				4)	clear;
					echo "Resetting to Google Pixel 3 XL";
					MOUNT_RW
					sed -i  "6 cdoresetprop ro.product.model 'Pixel 3 XL'" $FILE
					sed -i  "7 cdoresetprop ro.product.brand 'Google'" $FILE
					sed -i  "8 cdoresetprop ro.product.manufacturer 'Google'" $FILE
					sed -i  "9 cdoresetprop ro.product.name 'crosshatch'" $FILE
					sed -i  "10 cdoresetprop ro.product.device 'crosshatch'" $FILE
					MOUNT_RO
					press_enter
					break;;
				5)	clear;
					echo "Resetting to Samsung Galaxy S8";
					MOUNT_RW
					sed -i  "6 cdoresetprop ro.product.model 'SM-G950F'" $FILE
					sed -i  "7 cdoresetprop ro.product.brand 'samsung'" $FILE
					sed -i  "8 cdoresetprop ro.product.manufacturer 'samsung'" $FILE
					sed -i  "9 cdoresetprop ro.product.name 'dreamltexx'" $FILE
					sed -i  "10 cdoresetprop ro.product.device 'dreamlte'" $FILE
					MOUNT_RO
					press_enter
					break;;
				6)	clear;
					echo "Resetting to Samsung Galaxy S8+";
					MOUNT_RW
					sed -i  "6 cdoresetprop ro.product.model 'SM-G955F'" $FILE
					sed -i  "7 cdoresetprop ro.product.brand 'samsung'" $FILE
					sed -i  "8 cdoresetprop ro.product.manufacturer 'samsung'" $FILE
					sed -i  "9 cdoresetprop ro.product.name 'dream2ltexx'" $FILE
					sed -i  "10 cdoresetprop ro.product.device 'dream2lte'" $FILE
					MOUNT_RO
					press_enter
					break;;
				7)	clear;
					echo "Resetting to Samsung Galaxy S9";
					MOUNT_RW
					sed -i  "6 cdoresetprop ro.product.model 'SM-G960F'" $FILE
					sed -i  "7 cdoresetprop ro.product.brand 'samsung'" $FILE
					sed -i  "8 cdoresetprop ro.product.manufacturer 'samsung'" $FILE
					sed -i  "9 cdoresetprop ro.product.name 'starltexx'" $FILE
					sed -i  "10 cdoresetprop ro.product.device 'starlte'" $FILE
					MOUNT_RO
					press_enter
					break;;
				8)	clear;
					echo "Resetting to Samsung Galaxy S9+";
					MOUNT_RW
					sed -i  "6 cdoresetprop ro.product.model 'SM-G965F'" $FILE
					sed -i  "7 cdoresetprop ro.product.brand 'samsung'" $FILE
					sed -i  "8 cdoresetprop ro.product.manufacturer 'samsung'" $FILE
					sed -i  "9 cdoresetprop ro.product.name 'star2ltexx'" $FILE
					sed -i  "10 cdoresetprop ro.product.device 'star2lte'" $FILE
					MOUNT_RO
					press_enter
					break;;
				9)	clear;
					echo "Resetting to Samsung Galaxy Note 9";
					MOUNT_RW
					sed -i  "6 cdoresetprop ro.product.model 'SM-N960F'" $FILE
					sed -i  "7 cdoresetprop ro.product.brand 'samsung'" $FILE
					sed -i  "8 cdoresetprop ro.product.manufacturer 'samsung'" $FILE
					sed -i  "9 cdoresetprop ro.product.name 'crownltexx'" $FILE
					sed -i  "10 cdoresetprop ro.product.device 'crownlte'" $FILE
					MOUNT_RO
					press_enter
					break;;
			esac
		fi
	done
}

function max_vol_warning()
{
	while :
	do
		clear;
		echo "${GREEN}Max Vol Warning Toggle${NONE}";
		echo "";
		echo " 1. Enable Max Volume Warning";
		echo " 2. Disable Max Volume Warning";
		echo " 0. Exit";
		echo "";
		echo -n "${YELLOW}Enter Option: ${NONE}";
		read opt
		case $opt in
			1)	settings put global audio_safe_volume_state 3
				settings put secure unsafe_volume_music_active_ms 72000000
				REBOOT_REQUIRED=1
				clear;
				echo "Max Volume Warning enabled.";
				echo "Active time: 20 hours";
				echo "";
				press_enter
				break;;
			2)	settings put global audio_safe_volume_state 2
				settings put secure unsafe_volume_music_active_ms -1
				REBOOT_REQUIRED=1
				clear;
				echo "Max Volume Warning disabled.";
				echo "Active time: Forever";
				echo "";
				press_enter
				break;;
			0)	break;;
			*)	clear;
				echo "${RED}Invalid option.${NONE}";
				sleep 1
		esac
	done
}

function navbar_toggle()
{
	while :
	do
		clear;
		echo "${GREEN}Navigation Bar Toggle${NONE}";
		echo "";
		echo " 1. Enable Navigation Bar";
		echo " 2. Disable Navigation Bar";
		echo " 0. Exit";
		echo "";
		echo -n "${YELLOW}Enter Option: ${NONE}";
		read opt
		case $opt in
			1)	set_prop qemu.hw.mainkeys 0
				REBOOT_REQUIRED=1
				clear;
				echo "Navigation Bar enabled.";
				echo "Reboot device to apply.";
				echo "";
				press_enter
				break;;
			2)	set_prop qemu.hw.mainkeys 1
				REBOOT_REQUIRED=1
				clear;
				echo "Navigation Bar disabled.";
				echo "Reboot device to apply.";
				echo "";
				press_enter
				break;;
			0)	break;;
			*)	clear;
				echo "${RED}Invalid option.${NONE}";
				sleep 1
		esac
	done
}

function immersive_mode()
{
	while :
	do
		clear;
		echo "${GREEN}Immersive Mode Toggle${NONE}";
		echo "";
		echo " 1. Navigation Only Immersive Mode";
		echo " 2. Full Immersive Mode";
		echo " 3. Disable Immersive Mode";
		echo " 0. Exit";
		echo "";
		echo -n "${YELLOW}Enter Option: ${NONE}";
		read opt
		case $opt in
			1)	$CMD settings put global policy_control immersive.navigation=*
				clear;
				echo "Enabled navigation only immersive mode.";
				echo "";
				press_enter
				break;;
			2)	$CMD settings put global policy_control immersive.full=*
				clear;
				echo "Enabled full immersive mode";
				echo "";
				press_enter
				break;;
			3)	$CMD settings put global policy_control immersive.navigation=
				$CMD settings put global policy_control immersive.full=
				clear;
				echo "Disabled immersive mode";
				echo "";
				press_enter
				break;;
			0)	break;;
			*)	clear;
				echo "${RED}Invalid option.${NONE}";
				sleep 1
		esac
	done
}

function set_dns()
{
	FILE=/system/etc/init.d/LS00resetdns
	while :
	do
		clear;
		echo "${GREEN}DNS Changer${NONE}";
		echo ""
		echo " 1. CloudFlare DNS";
		echo " 2. Google DNS";
		echo " 0. Exit";
		echo "";
		echo -n "${YELLOW}Enter Option: ${NONE}";
		read opt
		case $opt in
			1)	iptables -t nat -A OUTPUT -p tcp --dport 53 -j DNAT --to-destination 1.1.1.1:53
				iptables -t nat -A OUTPUT -p udp --dport 53 -j DNAT --to-destination 1.0.0.1:53
				iptables -t nat -D OUTPUT -p tcp --dport 53 -j DNAT --to-destination 1.1.1.1:53 || true
				iptables -t nat -D OUTPUT -p udp --dport 53 -j DNAT --to-destination 1.0.0.1:53 || true
				iptables -t nat -I OUTPUT -p tcp --dport 53 -j DNAT --to-destination 1.1.1.1:53
				iptables -t nat -I OUTPUT -p udp --dport 53 -j DNAT --to-destination 1.0.0.1:53
				MOUNT_RW
				sed -i  "3 ciptables -t nat -A OUTPUT -p tcp --dport 53 -j DNAT --to-destination 1.1.1.1:53" $FILE
				sed -i  "4 ciptables -t nat -A OUTPUT -p udp --dport 53 -j DNAT --to-destination 1.0.0.1:53" $FILE
				sed -i  "5 ciptables -t nat -D OUTPUT -p tcp --dport 53 -j DNAT --to-destination 1.1.1.1:53 || true" $FILE
				sed -i  "6 ciptables -t nat -D OUTPUT -p udp --dport 53 -j DNAT --to-destination 1.0.0.1:53 || true" $FILE
				sed -i  "7 ciptables -t nat -I OUTPUT -p tcp --dport 53 -j DNAT --to-destination 1.1.1.1:53" $FILE
				sed -i  "8 ciptables -t nat -I OUTPUT -p udp --dport 53 -j DNAT --to-destination 1.0.0.1:53" $FILE
				MOUNT_RO
				clear;
				echo "Enabled CloudFlare DNS.";
				echo "";
				press_enter
				break;;
			2)	iptables -t nat -A OUTPUT -p tcp --dport 53 -j DNAT --to-destination 8.8.8.8:53
				iptables -t nat -A OUTPUT -p udp --dport 53 -j DNAT --to-destination 8.8.4.4:53
				iptables -t nat -D OUTPUT -p tcp --dport 53 -j DNAT --to-destination 8.8.8.8:53 || true
				iptables -t nat -D OUTPUT -p udp --dport 53 -j DNAT --to-destination 8.8.4.4:53 || true
				iptables -t nat -I OUTPUT -p tcp --dport 53 -j DNAT --to-destination 8.8.8.8:53
				iptables -t nat -I OUTPUT -p udp --dport 53 -j DNAT --to-destination 8.8.4.4:53
				MOUNT_RW
				sed -i  "3 ciptables -t nat -A OUTPUT -p tcp --dport 53 -j DNAT --to-destination 8.8.8.8:53" $FILE
				sed -i  "4 ciptables -t nat -A OUTPUT -p udp --dport 53 -j DNAT --to-destination 8.8.4.4:53" $FILE
				sed -i  "5 ciptables -t nat -D OUTPUT -p tcp --dport 53 -j DNAT --to-destination 8.8.8.8:53 || true" $FILE
				sed -i  "6 ciptables -t nat -D OUTPUT -p udp --dport 53 -j DNAT --to-destination 8.8.4.4:53 || true" $FILE
				sed -i  "7 ciptables -t nat -I OUTPUT -p tcp --dport 53 -j DNAT --to-destination 8.8.8.8:53" $FILE
				sed -i  "8 ciptables -t nat -I OUTPUT -p udp --dport 53 -j DNAT --to-destination 8.8.4.4:53" $FILE
				MOUNT_RO
				clear;
				echo "Enabled Google DNS.";
				echo "";
				press_enter
				break;;
			0)	break;;
			*)	clear;
				echo "${RED}Invalid option.${NONE}";
				sleep 1
		esac
	done
}

function set_powercfg()
{
	FILE=/system/etc/init.d/LS00powercfg
	# ===================================================================================================
	# Values taken from yc9559's Project WIPE 
	# powercfg script
	# verify_param() function
	powersave_value="80 680000:27 780000:39 880000:61 980000:68 1380000:98 1680000:94"
	balance_value="80 780000:53 880000:70 980000:50 1180000:71 1380000:97 1680000:92"
	performance_value="80 780000:31 880000:62 980000:42 1180000:69 1380000:95 1680000:78"
	fast_value="80 1680000:90"
	# ===================================================================================================
	expected_target=/sys/devices/system/cpu/cpu0/cpufreq/interactive/target_loads
	if [ "`cat ${expected_target}`" = "${powersave_value}" ]; then
		CURRENT="powersave"
	elif [ "`cat ${expected_target}`" = "${balance_value}" ]; then
		CURRENT="balance"
	elif [ "`cat ${expected_target}`" = "${performance_value}" ]; then
		CURRENT="performance"
	elif [ "`cat ${expected_target}`" = "${fast_value}" ]; then
		CURRENT="fast"
	else
		CURRENT="kernel_default"
	fi
	MOUNT_RW
	sed -i  "3 cpowercfg ${CURRENT}" $FILE
	MOUNT_RO
	while :
	do
		clear;
		echo "${GREEN}Project WIPE by yc9559 @ CoolApk${NONE}";
		echo "${GREEN}Github: github.com/yc9559/cpufreq-interactive-opt/${NONE}";
		echo "${GREEN}Ver: 20180603.2 [Thu Jun 28 04:26:24 2018]${NONE}";
		echo "";
		echo "";
		echo "Current config: ${CYAN}${CURRENT}${NONE}";
		echo "";
		echo " 1. Powersave";
		echo " 2. Balance";
		echo " 3. Performance";
		echo " 4. Fast";
		echo " 5. Restore Kernel Default";
		echo " 0. Exit";
		echo "";
		echo -n "${YELLOW}Enter Option: ${NONE}";
		read opt
		case $opt in
			1)	clear;
				echo "Setting power config to ${CYAN}[Powersave]${NONE}.";
				echo "";
				MOUNT_RW
				powercfg powersave
				sed -i  "3 cpowercfg powersave" $FILE
				MOUNT_RO
				echo "";
				press_enter
				break;;
			2)	clear;
				echo "Setting power config to ${CYAN}[Balance]${NONE}.";
				echo "";
				MOUNT_RW
				powercfg balance
				sed -i  "3 cpowercfg balance" $FILE
				MOUNT_RO
				echo "";
				press_enter
				break;;
			3)	clear;
				echo "Setting power config to ${CYAN}[Performance]${NONE}.";
				echo "";
				MOUNT_RW
				powercfg performance
				sed -i  "3 cpowercfg performance" $FILE
				MOUNT_RO
				echo "";
				press_enter
				break;;
			4)	clear;
				echo "Setting power config to ${CYAN}[Fast]${NONE}.";
				echo "";
				MOUNT_RW
				powercfg fast
				sed -i  "3 cpowercfg fast" $FILE
				MOUNT_RO
				echo "";
				press_enter
				break;;
			5)	clear;
				REBOOT_REQUIRED=1
				echo "Setting power config to ${CYAN}[kernel_default]${NONE}.";
				echo "Reboot to apply setting.";
				echo "";
				MOUNT_RW
				powercfg kernel_default
				sed -i  "3 cpowercfg kernel_default" $FILE
				MOUNT_RO
				echo "";
				press_enter
				break;;
			0)	break;;
			*)	clear;
				echo "${RED}Invalid option.${NONE}";
				sleep 1
		esac
	done
}

function adblock()
{
	while :
	do
		clear;
		echo "${GREEN}Ads Block${NONE}";
		echo "";
		echo " 1. Aggresive Adblock";
		echo " 2. Moderate Adblock";
		echo " 3. Disable Adblock";
		echo " 0. Exit";
		echo "";
		echo -n "${YELLOW}Enter Option: ${NONE}";
		read opt
		case $opt in
			1)	MOUNT_RW
				cp /system/etc/hosts.long /system/etc/hosts
				MOUNT_RO
				REBOOT_REQUIRED=1
				clear;
				echo "Enabled ${CYAN}aggresive${NONE} adblock.";
				echo "";
				echo "Reboot device to apply.";
				press_enter
				break;;
			2)	MOUNT_RW
				cp /system/etc/hosts.medium /system/etc/hosts
				MOUNT_RO
				REBOOT_REQUIRED=1
				clear;
				echo "Enabled ${CYAN}moderate${NONE} adblock";
				echo "";
				echo "Reboot device to apply.";
				press_enter
				break;;
			3)	MOUNT_RW
				cp /system/etc/hosts.short /system/etc/hosts
				MOUNT_RO
				REBOOT_REQUIRED=1
				clear;
				echo "Disabled adblock";
				echo "";
				echo "Reboot device to apply.";
				press_enter
				break;;
			0)	break;;
			*)	clear;
				echo "${RED}Invalid option.${NONE}";
				sleep 1
		esac
	done
}

function service_toggle()
{
	while :
	do
		clear;
		echo "${RED}${BOLD}[ WARNING ]${NONE}";
		echo "${GREEN}This function might break stuffs in${NONE}";
		echo "${GREEN}an unexpected and terrible way.${NONE}";
		echo "";
		sleep 1;
		echo " 1. Aggresive Service Disabler";
		echo " 2. Moderate Service Disabler";
		echo " 3. Disable Service Disabler";
		echo " 0. Exit";
		echo "";
		echo -n "${YELLOW}Enter Option: ${NONE}";
		read opt
		case $opt in
			1)	clear;
				echo "This can take up to 5 minutes";
				echo "Do not interrupt the process";
				dss disable &>/dev/null
				clear;
				echo "All done.";
				echo "";
				press_enter
				break;;
			2)	clear;
				echo "This can take up to 5 minutes";
				echo "Do not interrupt the process";
				dss2 disable &>/dev/null
				clear;
				echo "All done.";
				echo "";
				press_enter
				break;;
			3)	clear;
				echo "This can take up to 5 minutes";
				echo "Do not interrupt the process";
				dss enable &>/dev/null
				clear;
				echo "All done.";
				echo "";
				press_enter
				break;;
			0)	break;;
			*)	clear;
				echo "${RED}Invalid option.${NONE}";
				sleep 1
		esac
	done
}

function cpu_big_tuning()
{
	cpu_dir=/sys/devices/system/cpu/cpu4/cpufreq/
	cur_max_file=${cpu_dir}/scaling_max_freq
	FILE=/system/etc/init.d/LS00kernelconfig
	while :
	do
		CUR_MAX=`cat $cur_max_file`
		clear;
		echo "${BOLD}${GREEN}big cluster max frequency${NONE}";
		echo "Current Freq: ${CYAN}$(($CUR_MAX / 1000)) MHz${NONE}";
		echo "";
		i=0
		vAvailableFrequencies=($(cat $cpu_dir/scaling_available_frequencies))
		nAvailableFrequencies=${#vAvailableFrequencies[@]}
		while :
		do
			if [ "${vAvailableFrequencies[i]}" -gt 0 ] ; then
				echo "$(($i+1)).\t$((${vAvailableFrequencies[i]} / 1000))\tMHz";
				i=$((i + 1));
			else
				break;
			fi
		done
		echo "";
		echo " 0. Exit";
		echo "";
		echo -n "${YELLOW}Enter Option: ${NONE}";
		read opt

		if [ "$opt" -eq 0 ] ; then
			break;
		else
			opt=$((opt - 1));
		fi

		if [ "${vAvailableFrequencies[opt]}" -gt 0 ] ; then
			for i in 4 5 6 7; do
				MOUNT_RW
				chmod 660 /sys/devices/system/cpu/cpu$i/cpufreq/scaling_max_freq
				echo "${vAvailableFrequencies[opt]}" > /sys/devices/system/cpu/cpu$i/cpufreq/scaling_max_freq
				chmod 444 /sys/devices/system/cpu/cpu$i/cpufreq/scaling_max_freq
			done
				sed -i  "24 cecho ${vAvailableFrequencies[opt]} > /sys/devices/system/cpu/cpu$i/cpufreq/scaling_max_freq" $FILE
				MOUNT_RO
		else
			clear
			echo "${RED}Invalid option${NONE}";
			sleep 2
			clear
		fi
	done
}

function cpu_little_tuning()
{
	cpu_dir=/sys/devices/system/cpu/cpu0/cpufreq/
	cur_max_file=${cpu_dir}/scaling_max_freq
	FILE=/system/etc/init.d/LS00kernelconfig
	while :
	do
		CUR_MAX=`cat $cur_max_file`
		clear;
		echo "${BOLD}${GREEN}LITTLE cluster max frequency${NONE}";
		echo "Current Freq: ${CYAN}$(($CUR_MAX / 1000)) MHz${NONE}";
		echo "";
		i=0
		vAvailableFrequencies=($(cat $cpu_dir/scaling_available_frequencies))
		nAvailableFrequencies=${#vAvailableFrequencies[@]}
		while :
		do
			if [ "${vAvailableFrequencies[i]}" -gt 0 ] ; then
				echo "$(($i+1)).\t$((${vAvailableFrequencies[i]} / 1000))\tMHz";
				i=$((i + 1));
			else
				break;
			fi
		done
		echo "";
		echo " 0. Exit";
		echo "";
		echo -n "${YELLOW}Enter Option: ${NONE}";
		read opt

		if [ "$opt" -eq 0 ] ; then
			break;
		else
			opt=$((opt - 1));
		fi

		if [ "${vAvailableFrequencies[opt]}" -gt 0 ] ; then
			for i in 0 1 2 3; do
				MOUNT_RW
				chmod 660 /sys/devices/system/cpu/cpu$i/cpufreq/scaling_max_freq
				echo "${vAvailableFrequencies[opt]}" > /sys/devices/system/cpu/cpu$i/cpufreq/scaling_max_freq
				chmod 444 /sys/devices/system/cpu/cpu$i/cpufreq/scaling_max_freq
			done
				sed -i  "16 cecho ${vAvailableFrequencies[opt]} > /sys/devices/system/cpu/cpu\$i/cpufreq/scaling_max_freq" $FILE
				MOUNT_RO
		else
			clear
			echo "${RED}Invalid option${NONE}";
			sleep 2
			clear
		fi
	done
}

check_root
verify_files

while :
do
	clear;
	echo -e "${GREEN}${BOLD}Shell Script Advanced Features${NONE}";
	echo "Version: ${CYAN}$SCRIPT_VERSION${NONE}";
	echo "";
	echo " 1. Remap Bixby Key";
	echo " 2. Change Device Name";
	echo " 3. Max Volume Warning Toggle";
	echo " 4. Navigation Bar Toggle";
	echo " 5. Immersive Mode";
	echo " 6. Set DNS";
	echo " 7. Powercfg by yc9559@CoolApk [EXY8895]";
	echo " 8. Host File Based AdBlock";
	echo " 9. Service Disabler";
	echo "10. Set big Cluster Max Frequency";
	echo "11. Set LITTLE Cluster Max Frequency";
	echo "66. Reboot Device";
	echo "77. Reboot Recovery";
	echo "88. Reboot Bootloader";
	echo "99. Power Off";
	echo " 0. Exit";
	echo "";
	echo -n "${YELLOW}Enter option : ${NONE}";
	read opt
	echo "";
	case $opt in
		1)	edit_bixby;;
		2)	edit_device;;
		3)	max_vol_warning;;
		4)	navbar_toggle;;
		5)	immersive_mode;;
		6)	set_dns;;
		7)	set_powercfg;;
		8)	adblock;;
		9)	service_toggle;;
		10)	cpu_big_tuning;;
		11)	cpu_little_tuning;;
		66)	reboot &>/dev/null;;
		77)	reboot recovery &>/dev/null;;
		88)	reboot download &>/dev/null;;
		99) poweroff;;
		0)	clear;
			MOUNT_RO
			if [ "$REBOOT_REQUIRED" -eq 1 ]; then
				echo "You have made changes that require a reboot to apply";
				echo "";
				echo -n "Do you want to reboot now? (y/n): ";
				read opt
				case $opt in
					y|Y) reboot &>/dev/null;;
					*)	clear;;
				esac
			fi
			clear;
			break;;
		*)	clear;
			echo "${RED}Invalid option${NONE}"
			sleep 1;;
	esac
done
exit 0
